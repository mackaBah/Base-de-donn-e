-- Création de la base de données
CREATE DATABASE IF NOT EXISTS ecommerce
    CHARACTER SET utf8mb4
    COLLATE utf8mb4_unicode_ci;

USE ecommerce;

-- Table des clients
CREATE TABLE clients (
    id_client INT PRIMARY KEY AUTO_INCREMENT,
    nom VARCHAR(50) NOT NULL,
    prenom VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    telephone VARCHAR(15),
    date_inscription TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_email CHECK (email LIKE '%@%.%')
);

-- Table des adresses
CREATE TABLE adresses (
    id_adresse INT PRIMARY KEY AUTO_INCREMENT,
    id_client INT NOT NULL,
    rue VARCHAR(100) NOT NULL,
    ville VARCHAR(50) NOT NULL,
    code_postal VARCHAR(10) NOT NULL,
    pays VARCHAR(50) NOT NULL,
    type_adresse ENUM('livraison', 'facturation') NOT NULL,
    FOREIGN KEY (id_client) REFERENCES clients(id_client) ON DELETE CASCADE
);

-- Table des catégories de produits
CREATE TABLE categories (
    id_categorie INT PRIMARY KEY AUTO_INCREMENT,
    nom VARCHAR(50) NOT NULL,
    description TEXT
);

-- Table des produits
CREATE TABLE produits (
    id_produit INT PRIMARY KEY AUTO_INCREMENT,
    id_categorie INT NOT NULL,
    nom VARCHAR(100) NOT NULL,
    description TEXT,
    prix DECIMAL(10,2) NOT NULL,
    stock INT NOT NULL DEFAULT 0,
    date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_categorie) REFERENCES categories(id_categorie),
    CONSTRAINT chk_prix CHECK (prix >= 0),
    CONSTRAINT chk_stock CHECK (stock >= 0)
);

-- Table des commandes
CREATE TABLE commandes (
    id_commande INT PRIMARY KEY AUTO_INCREMENT,
    id_client INT NOT NULL,
    id_adresse_livraison INT NOT NULL,
    id_adresse_facturation INT NOT NULL,
    date_commande TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    statut ENUM('en_attente', 'confirmée', 'expédiée', 'livrée', 'annulée') DEFAULT 'en_attente',
    total DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (id_client) REFERENCES clients(id_client),
    FOREIGN KEY (id_adresse_livraison) REFERENCES adresses(id_adresse),
    FOREIGN KEY (id_adresse_facturation) REFERENCES adresses(id_adresse)
);

-- Table des détails des commandes
CREATE TABLE details_commande (
    id_commande INT NOT NULL,
    id_produit INT NOT NULL,
    quantite INT NOT NULL,
    prix_unitaire DECIMAL(10,2) NOT NULL,
    PRIMARY KEY (id_commande, id_produit),
    FOREIGN KEY (id_commande) REFERENCES commandes(id_commande),
    FOREIGN KEY (id_produit) REFERENCES produits(id_produit),
    CONSTRAINT chk_quantite CHECK (quantite > 0)
);

-- Index pour optimiser les recherches
CREATE INDEX idx_client_email ON clients(email);
CREATE INDEX idx_produit_categorie ON produits(id_categorie);
CREATE INDEX idx_commande_client ON commandes(id_client);
CREATE INDEX idx_commande_date ON commandes(date_commande);

-- Trigger pour mettre à jour le stock après une commande
DELIMITER //
CREATE TRIGGER after_order_detail_insert
AFTER INSERT ON details_commande
FOR EACH ROW
BEGIN
    UPDATE produits
    SET stock = stock - NEW.quantite
    WHERE id_produit = NEW.id_produit;
END;
//
DELIMITER ;
